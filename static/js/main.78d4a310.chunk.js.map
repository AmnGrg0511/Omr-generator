{"version":3,"sources":["components/Options.jsx","App.js","index.js"],"names":["Options","i","question","setQuestions","answers","setAnswers","submitted","console","log","style","display","margin","boxShadow","alignItems","justifyContent","backgroundColor","textAlign","width","height","fontSize","color","fontWeight","borderRight","padding","map","value","onClick","prev","e","j","className","App","useState","number","setNumber","time","setTime","remainingTime","setRemainingTime","questions","setSubmitted","score","setScore","length","placeholder","onChange","target","parseInt","type","split","hours","minutes","Array","fill","setInterval","correct","wrong","undefined","position","top","filter","flexWrap","net","forEach","q","calculate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78d4a310.chunk.js","sourcesContent":["export const Options = ({\n  i,\n  question,\n  setQuestions,\n  answers,\n  setAnswers,\n  submitted,\n}) => {\n  console.log(answers);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        margin: 10,\n        boxShadow: `#${\n          answers[i] ? (answers[i] !== question ? \"cf1b1b80\" : \"09c14999\" ): \"0000001d\"\n        } 0px 0px 4px`,\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          backgroundColor: \"#f9f9f9\",\n          textAlign: \"center\",\n          width: 25,\n          height: \"100%\",\n          fontSize: 10,\n          color: \"#999\",\n          fontWeight: \"bold\",\n          borderRight: \"1px solid #eee\",\n        }}\n      >\n        {i + 1}\n      </div>\n      <div style={{ padding: \"0 5px\" }}>\n        {[\"a\", \"b\", \"c\", \"d\"].map((value) => (\n          <button\n            key={value}\n            onClick={() => {\n              submitted\n                ? setAnswers((prev) =>\n                    prev.map((e, j) =>\n                      i === j ? (e === value ? \"\" : value) : e\n                    )\n                  )\n                : setQuestions((prev) =>\n                    prev.map((e, j) =>\n                      i === j ? (e === value ? \"\" : value) : e\n                    )\n                  );\n            }}\n            style={{\n              backgroundColor: value === answers[i] ? \"#28be72\" : \"\",\n            }}\n            className={\n              (value === question || value === answers[i] ? \"active \" : \"\") +\n              \"btn\"\n            }\n          >\n            {value}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Options } from \"./components/Options\";\n\nfunction App() {\n  const [number, setNumber] = useState(0);\n  const [time, setTime] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [score, setScore] = useState(null);\n\n  const calculate = () => {\n    const net = {\n      correct: 0,\n      wrong: 0,\n    };\n    questions.forEach((q, i) => {\n      if (q) {\n        if (answers[i] === q) {\n          net.correct++;\n        } else {\n          net.wrong++;\n        }\n      }\n    });\n    setScore(net);\n  };\n\n  return (\n    <div className=\"App\">\n      {questions.length === 0 && (\n        <>\n          <input\n            placeholder=\"Enter number of questions\"\n            onChange={({ target: { value } }) => {\n              if (value) setNumber(parseInt(value));\n            }}\n          />\n          <input\n            type=\"time\"\n            placeholder=\"Time\"\n            onChange={({ target: { value } }) => {\n              if (value) {\n                const [hours, minutes] = value\n                  .split(\":\")\n                  .map((e) => parseInt(e));\n                setTime(60 * (60 * hours + minutes));\n              }\n            }}\n          />\n          <button\n            className=\"btn btn-large\"\n            onClick={() => {\n              if (number && time) {\n                setQuestions(new Array(number).fill(\"\"));\n                setAnswers(new Array(number).fill(\"\"));\n                setInterval(\n                  () => setRemainingTime((prev) => (prev ? prev - 1 : time)),\n                  1000\n                );\n              }\n            }}\n          >\n            Start\n          </button>\n        </>\n      )}\n      {submitted && score == null && (\n        <div className=\"code\">\n          Mark correct answers\n        </div>\n      )}\n      {score !== null && (\n        <div\n          className=\"code\"\n        >\n          {[\n            [\"Total\", score.correct * 4 - score.wrong, number * 4],\n            [\"Correct\", score.correct],\n            [\"Incorrect\", score.wrong],\n            [\"Unattempted\", number - score.correct - score.wrong],\n          ].map((e) => (\n            <div>\n              <span style={{ padding: \"0 5px 0 20px\" }}>{e[0]}</span>\n              <span style={{ padding: 2, fontSize: 20 }}>{e[1]}</span>\n              {e[2] !== undefined && (\n                <span style={{ padding: \"0 10px 0 5px\" }}>/{e[2]}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n      {questions.length !== 0 && !submitted && (\n        <div\n          style={{\n            position: \"sticky\",\n            top: 0,\n            padding: \"20px 0\",\n            width: \"100%\",\n            backgroundColor: \"#fafbfc\",\n          }}\n        >\n          <div\n            style={{\n              width: \"60%\",\n              margin: \"0 auto 20px\",\n              backgroundColor: \"#fff\",\n            }}\n          >\n            <div\n              style={{\n                backgroundColor: \"#39b9df\",\n                height: 5,\n                width: `${\n                  (questions.filter((e) => e !== \"\").length / number) * 100\n                }%`,\n              }}\n            ></div>\n          </div>\n          <div\n            style={{\n              width: \"80%\",\n              margin: \"auto\",\n              backgroundColor: \"#fff\",\n            }}\n          >\n            <div\n              style={{\n                backgroundColor: \"#39df92\",\n                height: 5,\n                width: `${(remainingTime / time) * 100}%`,\n              }}\n            ></div>\n          </div>\n        </div>\n      )}\n      <div\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n      >\n        {questions.map((question, i) => (\n          <Options\n            key={i}\n            question={question}\n            setQuestions={setQuestions}\n            answers={answers}\n            setAnswers={setAnswers}\n            submitted={submitted}\n            i={i}\n          />\n        ))}\n      </div>\n\n      {questions.length !== 0 && (\n        <button\n          className=\"btn btn-large\"\n          onClick={() => {\n            submitted ? calculate() : setSubmitted(true);\n          }}\n        >\n          {submitted ? \"Calculate\" : \"Submit\"}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}